/* ORA-00054: resource busy and acquire with NOWAIT specified or timeout expired
alter session set ddl_lock_timeout = 500; */
/*alter session set plscope_settings = 'IDENTIFIERS:NONE';*/
/*MAXIMO 6 JUGADORES EN EL EQUIPO*/
create or replace NONEDITIONABLE TRIGGER MAX_JUGADORES
FOR INSERT OR UPDATE ON JUGADORES
COMPOUND TRIGGER
    NUM_JUGADORES NUMBER;
    V_COD_EQUIPO NUMBER;
BEFORE EACH ROW IS
    BEGIN
    V_COD_EQUIPO := :NEW.COD_EQUIPO;  
    END BEFORE EACH ROW;
AFTER STATEMENT IS
    BEGIN
    -- Contar el numero de jugadores en el equipo actual
    SELECT COUNT(*) INTO NUM_JUGADORES 
        FROM JUGADORES WHERE COD_EQUIPO = V_COD_EQUIPO;
        -- Si el numero de jugadores es 6 o mas --> Error
        IF NUM_JUGADORES >= 6 THEN
            RAISE_APPLICATION_ERROR(-20001, 'El equipo ya esta completo');
        END IF;
    END AFTER STATEMENT;
END;
/

/*MINIMO 2 JUGADORES EN EL EQUIPO*/
CREATE OR REPLACE TRIGGER MIN_JUGADORES
BEFORE INSERT OR UPDATE ON EQUIPO_COMPETICION
FOR EACH ROW
DECLARE
  JUGADORES INTEGER;
BEGIN
  -- Contar el numero de jugadores en el equipo que se intenta anadir
  SELECT COUNT(*) INTO JUGADORES
  FROM JUGADORES
  WHERE COD_EQUIPO = :NEW.COD_EQUIPO;
  -- Si el numero de jugadores es menor que dos --> Error
  IF JUGADORES < 2 THEN
    RAISE_APPLICATION_ERROR(-20002, 'Equipo con menos de 2 jugadores');
  END IF;
END;
/


/*NUMERO DE EQUIPOS PAR*/
CREATE OR REPLACE TRIGGER EQUIPOS_PARES
BEFORE UPDATE OF CURSO ON COMPETICIONES
FOR EACH ROW
DECLARE
  EQUIPOS INTEGER;
BEGIN
  -- Comprueba si el cambio es de 0 a 1
  IF :OLD.CURSO = 0 AND :NEW.CURSO = 1 THEN
    -- Cuenta el numero de equipos asociados a la competicion
    SELECT COUNT(*)
    INTO EQUIPOS
    FROM EQUIPO_COMPETICION
    WHERE COD_COMPETICION = :NEW.COD_COMPE;
    -- Si el numero de equipos es impar --> Error
    IF MOD(EQUIPOS, 2) != 0 THEN
      RAISE_APPLICATION_ERROR(-20002, 
      'El numero de equipos debe ser par para iniciar la compticion');
    END IF;
  END IF;
END;    
/

/*SALARIO TOPE DE 200.000 euros*/
CREATE OR REPLACE TRIGGER SALARIO_MAXIMO_JUGADORES
FOR INSERT OR UPDATE ON JUGADORES
COMPOUND TRIGGER
    SUELDO_TOTAL NUMBER := 0; -- Suma del sueldo
    V_COD_EQUIPO_NEW NUMBER; -- Código de equipo para nueva inserción o actualización
BEFORE EACH ROW IS
    BEGIN
        V_COD_EQUIPO_NEW := :NEW.COD_EQUIPO;
    END BEFORE EACH ROW;
AFTER STATEMENT IS
    BEGIN
        -- Calcular el sueldo total del equipo después de insert o update
        SELECT NVL(SUM(SUELDO), 0) INTO SUELDO_TOTAL
        FROM JUGADORES
        WHERE COD_EQUIPO = V_COD_EQUIPO_NEW;
        -- Verificar si el sueldo total supera el límite de 200,000 euros
        IF SUELDO_TOTAL > 200000 THEN
            RAISE_APPLICATION_ERROR(-20004, 
                'Sobrepasa el límite salarial para jugadores');
        END IF;
    END AFTER STATEMENT;
END;
/



CREATE OR REPLACE TRIGGER SALARIO_MAXIMO_STAFF
BEFORE INSERT OR UPDATE ON STAFF
FOR EACH ROW
DECLARE
  SUELDO_TOTAL NUMBER;
BEGIN
  -- Calcular el sueldo actual del equipo
  SELECT NVL(SUM(SUELDO), 0) INTO SUELDO_TOTAL 
  FROM JUGADORES 
  WHERE COD_EQUIPO = :NEW.COD_EQUIPO;
  SELECT NVL(SUM(SUELDO), 0) + SUELDO_TOTAL INTO SUELDO_TOTAL 
  FROM STAFF 
  WHERE COD_EQUIPO = :NEW.COD_EQUIPO;
  -- Verificar el sueldo despues de la insert o update
  IF INSERTING THEN
    SUELDO_TOTAL := SUELDO_TOTAL + :NEW.SUELDO;
  ELSIF UPDATING THEN
    SUELDO_TOTAL := SUELDO_TOTAL - :OLD.SUELDO + :NEW.SUELDO;
  END IF;
  -- Si la suma es mayor de 200.000 euros --> Error
  IF SUELDO_TOTAL > 200000 THEN
    RAISE_APPLICATION_ERROR(-20005, 'Sobrepasa de limite salarial');
  END IF;
END;
/

/*MINIMO UN ENTRENTADOR*/
CREATE OR REPLACE TRIGGER MIN_ENTRENADOR
BEFORE INSERT OR UPDATE ON STAFF
FOR EACH ROW
DECLARE
  SUMA NUMBER;
BEGIN
    -- CALCULAR LA CANTIDAD DE ENTRENADORES EXISTENTES EN EL EQUIPO
    SELECT COUNT(*) INTO SUMA
    FROM STAFF
    WHERE COD_EQUIPO = :NEW.COD_EQUIPO
    AND UPPER(CARGO) = 'ENTRENADOR';
    -- AJUSTAR SEGÚN LA OPERACION
    IF INSERTING THEN
        -- SI ESTAMOS INSERTANDO Y EL CARGO ES 'ENTRENADOR', INCREMENTAR SUMA
        IF UPPER(:NEW.CARGO) = 'ENTRENADOR' THEN
            SUMA := SUMA + 1;
        END IF;
    ELSIF UPDATING THEN
        -- SI ESTAMOS ACTUALIZANDO, AJUSTAR SEGUN EL CARGO ANTERIOR Y NUEVO
        IF UPPER(:OLD.CARGO) = 'ENTRENADOR' THEN
            SUMA := SUMA - 1;
        END IF;
        IF UPPER(:NEW.CARGO) = 'ENTRENADOR' THEN
            SUMA := SUMA + 1;
        END IF;
    END IF;
    -- SI DESPUES DEL AJUSTE NO HAY NINGUN ENTRENADOR, LANZAR ERROR
    IF SUMA = 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'EQUIPO SIN ENTRENADOR');
    END IF;
END;
/


/*MAXIMO UN ASISTENTE*/
CREATE OR REPLACE TRIGGER MAX_ASISTENTE
BEFORE INSERT OR UPDATE ON STAFF
FOR EACH ROW
DECLARE
    SUMA NUMBER;
BEGIN
    -- CONTAR EL NUMERO DE ASISTENTES EN EL EQUIPO ANTES DE LA OPERACION
    SELECT COUNT(*) INTO SUMA
    FROM STAFF
    WHERE COD_EQUIPO = :NEW.COD_EQUIPO 
    AND UPPER(CARGO) = 'ASISTENTE';
    -- AJUSTAR EL CONTEO SEGUN LA OPERACION
    IF INSERTING THEN
        -- SI ESTAMOS INSERTANDO Y EL CARGO ES 'ASISTENTE', INCREMENTAR SUMA
        IF UPPER(:NEW.CARGO) = 'ASISTENTE' THEN
            SUMA := SUMA + 1;
        END IF;
    ELSIF UPDATING THEN
        -- AJUSTAR SEGUN EL CARGO ANTERIOR Y EL NUEVO
        IF UPPER(:OLD.CARGO) = 'ASISTENTE' THEN
            SUMA := SUMA - 1;
        END IF;
        IF UPPER(:NEW.CARGO) = 'ASISTENTE' THEN
            SUMA := SUMA + 1;
        END IF;
    END IF;
    -- LANZAR ERROR SI HAY MAS DE UN ASISTENTE
    IF SUMA > 1 THEN
        RAISE_APPLICATION_ERROR(-20007, 
        'SOLO SE PERMITE UN ASISTENTE POR EQUIPO');
    END IF;
END;
/

/*BLOQUEO DE LA TABLA EQUIPOS CON LA COMPETICION EN CURSO*/
CREATE OR REPLACE TRIGGER BLOQUEO_EQUIPO_COMPETICION
BEFORE INSERT OR UPDATE OR DELETE ON EQUIPO_COMPETICION
FOR EACH ROW
DECLARE
    EN_CURSO NUMBER;
BEGIN
    -- Verificar si la competicion esta en curso
    SELECT CURSO INTO EN_CURSO
    FROM COMPETICIONES
    WHERE COD_COMPE = :NEW.COD_EQUIPO;
    -- Si esta en curso, impedir el insert
    IF EN_CURSO = 1 THEN
        RAISE_APPLICATION_ERROR(-20008, 'Competicion en curso');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER BLOQUEO_JUGADORES_1
BEFORE INSERT OR UPDATE OR DELETE ON JUGADORES
FOR EACH ROW
DECLARE
    EN_CURSO NUMBER;  -- Para verificar si la competición esta en curso
BEGIN
    -- Verificar si el equipo esta en una competición en curso
    SELECT COUNT(*) INTO EN_CURSO
    FROM COMPETICIONES C
    JOIN EQUIPO_COMPETICION EC ON EC.COD_COMPETICION = C.COD_COMPE
    JOIN EQUIPOS E ON EC.COD_EQUIPO = E.COD_EQUIPO
    WHERE E.COD_EQUIPO = :NEW.COD_EQUIPO
    AND C.CURSO = 1;
    -- Si la competicion está en curso, bloquear la operacion
    IF EN_CURSO > 0 THEN
        RAISE_APPLICATION_ERROR(-20009, 'Competicion en curso');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER BLOQUEO_STAFF
BEFORE INSERT OR UPDATE OR DELETE ON STAFF
FOR EACH ROW
DECLARE
    EN_CURSO NUMBER;  -- Para verificar si la competicion esta en curso
BEGIN
    -- Verificar si el equipo está en una competición en curso
    SELECT COUNT(*) INTO EN_CURSO
    FROM COMPETICIONES C
    JOIN EQUIPO_COMPETICION EC ON EC.COD_COMPETICION = C.COD_COMPE
    JOIN EQUIPOS E ON EC.COD_EQUIPO = E.COD_EQUIPO
    WHERE E.COD_EQUIPO = :NEW.COD_EQUIPO
    AND C.CURSO = 1;
    -- Si la competicion está en curso, bloquear la operacion
    IF EN_CURSO > 0 THEN
        RAISE_APPLICATION_ERROR(-20010, 'Competicion en curso');
    END IF;
END;
/


/*ENFRENTAMIENTOS EN EL MISMO DIA*/
CREATE OR REPLACE TRIGGER DIA_ENFRENTAMIENTOS
BEFORE INSERT OR UPDATE
ON ENFRENTAMIENTOS
FOR EACH ROW
DECLARE
  V_DIA DATE;
BEGIN
  -- Saber el dia del enfrentamiento
  SELECT DIA INTO V_DIA
  FROM JORNADAS
  WHERE COD_JORNADAS = :NEW.COD_JORNADA;
  -- Verifica que todos los enfrentamientos sean el mismo dia
  IF :NEW.FECHA != V_DIA THEN
	RAISE_APPLICATION_ERROR(-20011, 'Fechas diferentes');
  END IF;
END;
/

/*EQUIPOS SIN REPETIR EN ENFRENTAMIENTOS*/
CREATE OR REPLACE TRIGGER ENFRENTAMIENTO_UNICO
BEFORE INSERT OR UPDATE
ON ENFRENTAMIENTOS
FOR EACH ROW
DECLARE
  V_COUNT_LOCAL NUMBER;
  V_COUNT_VISITANTE NUMBER;
BEGIN
  -- Verifica cuantos enfrentamientos tienen el mismo equipo local 
  SELECT COUNT(*)
  INTO V_COUNT_LOCAL
  FROM ENFRENTAMIENTOS
  WHERE COD_JORNADA = :NEW.COD_JORNADA
	AND COD_EQUIPO_LOCAL = :NEW.COD_EQUIPO_LOCAL
	AND COD_ENFRENTAMIENTO != :NEW.COD_ENFRENTAMIENTO;
  -- Verifica cuantos enfrentamientos tienen el mismo equipo visitante 
  SELECT COUNT(*)
  INTO V_COUNT_VISITANTE
  FROM ENFRENTAMIENTOS
  WHERE COD_JORNADA = :NEW.COD_JORNADA
	AND COD_EQUIPO_VISITANTE = :NEW.COD_EQUIPO_VISITANTE
	AND COD_ENFRENTAMIENTO != :NEW.COD_ENFRENTAMIENTO;
  -- Si ya hay varios enfrentamiento con el mismo equipo local --> Error
  IF V_COUNT_LOCAL > 0 THEN
	RAISE_APPLICATION_ERROR(-20012, 'Equipo 2 veces local');
  END IF;
  -- Si ya hay varios enfrentamiento con el mismo equipo visitante --> Error
  IF V_COUNT_VISITANTE > 0 THEN
	RAISE_APPLICATION_ERROR(-20013,'Equipo 2 veces visitante');
  END IF;
END;
/
/* CAMBIAR ESTADO (CERRAR PLAZO INSCRIPCION SI COMPETICION ESTA YA EN CURSO) */
CREATE OR REPLACE TRIGGER CERRAR_INSCRIPCION
BEFORE INSERT ON COMPETICIONES
FOR EACH ROW
BEGIN
    IF :NEW.FECHA_INICIO <= SYSDATE THEN
        :NEW.CURSO := 1;
    END IF;
END;
/

